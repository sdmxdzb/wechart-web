#MYSQL #开发环境
#
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/wechart
spring.datasource.username=root
spring.datasource.password=root
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#最小初始化链接
spring.datasource.initialSize=5
#最小初始化链接
spring.datasource.minIdle=1
#最大初始化链接
spring.datasource.maxActive=100
#获取连接时最大等待时间，单位毫秒
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒 
spring.datasource.minEvictableIdleTimeMillis=300000
#不影响性能，并且保证安全性
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，
#执行validationQuery检测连接是否有效。默认值为false 
spring.datasource.testWhileIdle=true
#用来检测连接是否有效的sql
spring.datasource.validationQuery=select 'x' from dual
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。默认值为true 
spring.datasource.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能默认值为false 
spring.datasource.testOnReturn=false
#打开PSCache，并且指定每个连接上PSCache的大小 
#如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。
#分库分表较多的数据库，建议配置为false。
spring.datasource.poolPreparedStatements=true
spring.datasource.maxOpenPreparedStatements=100
#查询超时时间
spring.datasource.query-timeout=6000
#事务查询超时时间
spring.datasource.transaction-query-timeout=6000
#关闭空闲连接超时时间
spring.datasource.remove-abandoned-timeout=1800
#
spring.datasource.druid.filter-class-names=stat
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat

#属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
#如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理将起作用
spring.aop.proxy-target-class=true















